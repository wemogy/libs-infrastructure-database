"use strict";(self.webpackChunkwemogy=self.webpackChunkwemogy||[]).push([[902],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return y}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(n),m=r,y=p["".concat(s,".").concat(m)]||p[m]||d[m]||i;return n?a.createElement(y,o(o({ref:t},c),{},{components:n})):a.createElement(y,o({ref:t},c))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:r,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7185:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return o},default:function(){return d},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return u}});var a=n(3117),r=(n(7294),n(3905));const i={},o="Multi-Tenancy",l={unversionedId:"multi-tenancy",id:"multi-tenancy",title:"Multi-Tenancy",description:"Motivation",source:"@site/docs-general/04-multi-tenancy.md",sourceDirName:".",slug:"/multi-tenancy",permalink:"/multi-tenancy",draft:!1,editUrl:"https://github.com/wemogy/libs-infrastructure-database/edit/main/docs-general/04-multi-tenancy.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Database Repository",permalink:"/database-repository"},next:{title:"Sorting & Pagination",permalink:"/sorting-pagination"}},s={},u=[{value:"Motivation",id:"motivation",level:2},{value:"Advantages",id:"advantages",level:3},{value:"Secure by default",id:"secure-by-default",level:4},{value:"How to Use",id:"how-to-use",level:2}],c={toc:u},p="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"multi-tenancy"},"Multi-Tenancy"),(0,r.kt)("h2",{id:"motivation"},"Motivation"),(0,r.kt)("p",null,"For the use-case that you need to support the same primary key values on the same database (for example when different cloned environments are migrated on the same database), the concept of multi-tenancy is used."),(0,r.kt)("p",null,"The idea is that the migration takes place by prefixing all partition keys by an environment/tenant-related value. The prefix is injected when querying/persisting and is filtered out of the results."),(0,r.kt)("p",null,"Multi-Tenancy is currently supported for the following database clients:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Local In Memory Database"),(0,r.kt)("li",{parentName:"ul"},"Azure Cosmos DB")),(0,r.kt)("h3",{id:"advantages"},"Advantages"),(0,r.kt)("h4",{id:"secure-by-default"},"Secure by default"),(0,r.kt)("p",null,"Using this approach the repository implementation, which automatically prefix the ",(0,r.kt)("inlineCode",{parentName:"p"},"GetTenantId()")," result of the ",(0,r.kt)("inlineCode",{parentName:"p"},"IDatabaseTenantProvider"),", makes it ",(0,r.kt)("strong",{parentName:"p"},"impossible to access the data")," of another database tenant accidentally."),(0,r.kt)("h2",{id:"how-to-use"},"How to Use"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Create an IDatabaseTenantProvider:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"title='Example for IDatabaseTenantProvider'",title:"'Example",for:!0,"IDatabaseTenantProvider'":!0},'using System;\nusing SpaceBlocks.Libs.Core.Context.Abstractions;\nusing Wemogy.Infrastructure.Database.Core.Plugins.MultiTenantDatabase.Abstractions;\n\nnamespace Wemogy.Subscriptions.Webservices.Main.Core\n{\n    public class AppleTenantProvider : IDatabaseTenantProvider\n    {\n        public string GetTenantId() => "apple_production";\n    }\n}\n')),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Adapt your DI container to use the provider above (unit-test example):")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"title='DI example for IDatabaseTenantProvider'",title:"'DI",example:!0,for:!0,"IDatabaseTenantProvider'":!0},"[Fact]\npublic void AddMultiTenantDatabaseRepository_ShouldWork()\n{\n    // Arrange\n    var cosmosDatabaseClientFactory = new CosmosDatabaseClientFactory(\n        ConnectionString,\n        DatabaseName);\n    ServiceCollection.AddSingleton<AppleTenantProvider>();\n    ServiceCollection\n        .AddDatabase(cosmosDatabaseClientFactory)\n        .AddRepository<IUserRepository, AppleTenantProvider>();\n    // Act\n    var userRepository = ServiceCollection.BuildServiceProvider().GetRequiredService<IUserRepository>();\n    // Assert\n    Assert.NotNull(userRepository);\n\n    var entity = await userRepository.CreateAsync(user)\n    // entity.tenantId is not prefixed with apple_production. But in the database it is.\n    // the library filters out the prefixes when retrieving data from the database. Those are only used internally to\n    // support the multi-tenancy concept.\n}\n")),(0,r.kt)("p",null,"The result is indexed under the ",(0,r.kt)("inlineCode",{parentName:"p"},"apple_production__{ID}")," partition key and the tenantId property has the same value as the partition key.\nWhen querying/getting the entity out of the repository, the prefix is automatically removed."),(0,r.kt)("p",null,"Predicate support is also included, meaning that you can use the partition-key as filter in a predicate and the prefixing is automatically done via the library as well."))}d.isMDXComponent=!0}}]);