"use strict";(self.webpackChunkwemogy=self.webpackChunkwemogy||[]).push([[871],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(n),y=a,h=p["".concat(c,".").concat(y)]||p[y]||d[y]||i;return n?r.createElement(h,o(o({ref:t},u),{},{components:n})):r.createElement(h,o({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=y;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},6260:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return o},default:function(){return d},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return l}});var r=n(3117),a=(n(7294),n(3905));const i={},o="Database Repository",s={unversionedId:"database-repository",id:"database-repository",title:"Database Repository",description:"CreateAsync",source:"@site/docs-general/03-database-repository.md",sourceDirName:".",slug:"/database-repository",permalink:"/database-repository",draft:!1,editUrl:"https://github.com/wemogy/libs-infrastructure-database/edit/main/docs-general/03-database-repository.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Getting started",permalink:"/getting-started"},next:{title:"Multi-Tenancy",permalink:"/multi-tenancy"}},c={},l=[{value:"CreateAsync",id:"createasync",level:2},{value:"GetAsync",id:"getasync",level:2},{value:"QueryAsync",id:"queryasync",level:2},{value:"QuerySingleAsync",id:"querysingleasync",level:2},{value:"CountAsync",id:"countasync",level:2},{value:"ExistsAsync",id:"existsasync",level:2},{value:"EnsureExistsAsync",id:"ensureexistsasync",level:2},{value:"IterateAsync",id:"iterateasync",level:2},{value:"ReplaceAsync",id:"replaceasync",level:2},{value:"UpdateAsync",id:"updateasync",level:2}],u={toc:l},p="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"database-repository"},"Database Repository"),(0,a.kt)("h2",{id:"createasync"},"CreateAsync"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"CreateAsync")," method is used to insert an entity in the database."),(0,a.kt)("h2",{id:"getasync"},"GetAsync"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"GetAsync")," methods provide several ways to get a single entity from the database.\nA ",(0,a.kt)("inlineCode",{parentName:"p"},"NotFoundErrorException")," exception is thrown if the entity does not exist or if it has been soft-deleted."),(0,a.kt)("h2",{id:"queryasync"},"QueryAsync"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"QueryAsync")," methods provide several ways to get multiple entities from the database."),(0,a.kt)("h2",{id:"querysingleasync"},"QuerySingleAsync"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"QuerySingleAsync")," method provides a way to get a single entity from the database. It throws a ",(0,a.kt)("inlineCode",{parentName:"p"},"PreconditionFailedErrorException")," if more results are returned than the expected one. It also throws a ",(0,a.kt)("inlineCode",{parentName:"p"},"NotFoundErrorException")," when no result is found."),(0,a.kt)("h2",{id:"countasync"},"CountAsync"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"CountAsync")," method provides a ways to count entities from the database, which match a given filter."),(0,a.kt)("h2",{id:"existsasync"},"ExistsAsync"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"ExistsAsync")," methods are used to check if entities exist in the database. They all return true when found or false otherwise."),(0,a.kt)("h2",{id:"ensureexistsasync"},"EnsureExistsAsync"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"EnsureExistsAsync")," methods are used to check if entities exist in the database. They throw a ",(0,a.kt)("inlineCode",{parentName:"p"},"NotFoundErrorException")," if the no entities are found."),(0,a.kt)("h2",{id:"iterateasync"},"IterateAsync"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"IterateAsync")," methods are used to iterate the repository via a filter and apply an operation on the filtered results."),(0,a.kt)("h2",{id:"replaceasync"},"ReplaceAsync"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"ReplaceAsync")," method can be used to replace an existing entity in the database."),(0,a.kt)("h2",{id:"updateasync"},"UpdateAsync"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"UpdateAsync")," method can be used to update an existing entity in the database, through a given operation."))}d.isMDXComponent=!0}}]);