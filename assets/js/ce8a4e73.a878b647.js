"use strict";(self.webpackChunkwemogy=self.webpackChunkwemogy||[]).push([[82],{3905:function(t,e,n){n.d(e,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var l=r.createContext({}),p=function(t){var e=r.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},u=function(t){var e=p(t.components);return r.createElement(l.Provider,{value:e},t.children)},c="mdxType",m={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},y=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,i=t.originalType,l=t.parentName,u=s(t,["components","mdxType","originalType","parentName"]),c=p(n),y=a,d=c["".concat(l,".").concat(y)]||c[y]||m[y]||i;return n?r.createElement(d,o(o({ref:e},u),{},{components:n})):r.createElement(d,o({ref:e},u))}));function d(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var i=n.length,o=new Array(i);o[0]=y;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=t,s[c]="string"==typeof t?t:a,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},6795:function(t,e,n){n.r(e),n.d(e,{assets:function(){return l},contentTitle:function(){return o},default:function(){return m},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return p}});var r=n(3117),a=(n(7294),n(3905));const i={},o="Getting started",s={unversionedId:"getting-started",id:"getting-started",title:"Getting started",description:"Creating an entity",source:"@site/docs-general/02-getting-started.md",sourceDirName:".",slug:"/getting-started",permalink:"/getting-started",draft:!1,editUrl:"https://github.com/wemogy/libs-infrastructure-database/edit/main/docs-general/02-getting-started.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",next:{title:"Database Repository",permalink:"/database-repository"}},l={},p=[{value:"Creating an entity",id:"creating-an-entity",level:2},{value:"Partition Key",id:"partition-key",level:3},{value:"Sample entity implementation",id:"sample-entity-implementation",level:3},{value:"Declaring the Repository Interface",id:"declaring-the-repository-interface",level:2},{value:"Repository options",id:"repository-options",level:3}],u={toc:p},c="wrapper";function m(t){let{components:e,...n}=t;return(0,a.kt)(c,(0,r.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"getting-started"},"Getting started"),(0,a.kt)("h2",{id:"creating-an-entity"},"Creating an entity"),(0,a.kt)("p",null,"All entity classes ",(0,a.kt)("strong",{parentName:"p"},"must")," implement the ",(0,a.kt)("inlineCode",{parentName:"p"},"IEntityBase")," interface. Per default, all ids must be converted to type ",(0,a.kt)("inlineCode",{parentName:"p"},"string"),"."),(0,a.kt)("h3",{id:"partition-key"},"Partition Key"),(0,a.kt)("p",null,"Each entity should define a ",(0,a.kt)("strong",{parentName:"p"},"partition key")," property, which identifies which entities should be stored closely together to improve the read performance."),(0,a.kt)("p",null,"The ",(0,a.kt)("strong",{parentName:"p"},"partition key")," property is indicated by the ",(0,a.kt)("inlineCode",{parentName:"p"},"PartitionKey")," attribute:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Partition Key sample"',title:'"Partition',Key:!0,'sample"':!0},"[PartitionKey]\npublic Guid TenantId { get; set; }\n")),(0,a.kt)("p",null,"In case that you can't identify a ",(0,a.kt)("strong",{parentName:"p"},"partition key")," property, because all your entities are global, it's mandatory to define a dummy partition key property, which has always the same value. We already provide a solution for that:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Global Partition Key sample"',title:'"Global',Partition:!0,Key:!0,'sample"':!0},"using Wemogy.Infrastructure.Database.Core.Attributes;\nusing Wemogy.Infrastructure.Database.Core.Constants;\n\n[PartitionKey]\npublic string PartitionKey { get; set; } = PartitionKeyDefaults.GlobalPartition;\n")),(0,a.kt)("admonition",{title:"Pro Tip",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"GlobalEntityBase")," class as base class to get the default ",(0,a.kt)("strong",{parentName:"p"},"partition key")," included.")),(0,a.kt)("h3",{id:"sample-entity-implementation"},"Sample entity implementation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="User.cs"',title:'"User.cs"'},"using Wemogy.Infrastructure.Database.Core.Abstractions;\nusing Wemogy.Infrastructure.Database.Core.Attributes;\n\npublic class User : EntityBase\n{\n  [PartitionKey]\n  public Guid TenantId { get; set; }\n\n  public string Firstname { get; set; }\n\n  public User()\n  {\n    TenantId = Guid.Empty;\n    Firstname = string.Empty;\n  }\n}\n")),(0,a.kt)("h2",{id:"declaring-the-repository-interface"},"Declaring the Repository Interface"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="IUserRepository.cs"',title:'"IUserRepository.cs"'},"using Wemogy.Infrastructure.Database.Core.Abstractions;\n\npublic interface IUserRepository : IDatabaseRepository<User>\n{\n}\n")),(0,a.kt)("h3",{id:"repository-options"},"Repository options"),(0,a.kt)("p",null,"Using the ",(0,a.kt)("inlineCode",{parentName:"p"},"RepositoryOptions")," attribute you can customize the following options for a repository:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Option"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:null},"Default"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"enableSoftDelete")),(0,a.kt)("td",{parentName:"tr",align:null},"Controls, if the repository should use soft-delete by default"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"true")," if entity implements ",(0,a.kt)("inlineCode",{parentName:"td"},"ISoftDeletable"),(0,a.kt)("br",null),(0,a.kt)("inlineCode",{parentName:"td"},"false")," if entity ",(0,a.kt)("strong",{parentName:"td"},"not")," implements ",(0,a.kt)("inlineCode",{parentName:"td"},"ISoftDeletable"))))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="IUserRepository.cs"',title:'"IUserRepository.cs"'},"using Wemogy.Infrastructure.Database.Core.Abstractions;\nusing Wemogy.Infrastructure.Database.Core.Attributes;\n\n[RepositoryOptions(enableSoftDelete: true)]\npublic interface IUserRepository : IDatabaseRepository<User>\n{\n}\n")))}m.isMDXComponent=!0}}]);