"use strict";(self.webpackChunkwemogy=self.webpackChunkwemogy||[]).push([[82],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},y="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),y=p(n),d=a,m=y["".concat(l,".").concat(d)]||y[d]||u[d]||i;return n?r.createElement(m,o(o({ref:t},c),{},{components:n})):r.createElement(m,o({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[y]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6795:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return o},default:function(){return u},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return p}});var r=n(3117),a=(n(7294),n(3905));const i={},o="Getting started",s={unversionedId:"getting-started",id:"getting-started",title:"Getting started",description:"Creating an entity",source:"@site/docs-general/02-getting-started.md",sourceDirName:".",slug:"/getting-started",permalink:"/getting-started",draft:!1,editUrl:"https://github.com/wemogy/libs-infrastructure-database/edit/main/docs-general/02-getting-started.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",next:{title:"Database Repository",permalink:"/database-repository"}},l={},p=[{value:"Creating an entity",id:"creating-an-entity",level:2},{value:"Partition Key",id:"partition-key",level:3},{value:"Sample entity implementation",id:"sample-entity-implementation",level:3},{value:"Declaring the Repository Interface",id:"declaring-the-repository-interface",level:2},{value:"Repository options",id:"repository-options",level:3},{value:"Initializing a Repository",id:"initializing-a-repository",level:2},{value:"DatabaseRepositoryFactory",id:"databaserepositoryfactory",level:3},{value:"Shortcuts",id:"shortcuts",level:4},{value:"CosmosDB repository factory",id:"cosmosdb-repository-factory",level:5},{value:"InMemory repository factory",id:"inmemory-repository-factory",level:5},{value:"Dependency Injection",id:"dependency-injection",level:3}],c={toc:p},y="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(y,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"getting-started"},"Getting started"),(0,a.kt)("h2",{id:"creating-an-entity"},"Creating an entity"),(0,a.kt)("p",null,"All entity classes ",(0,a.kt)("strong",{parentName:"p"},"must")," implement the ",(0,a.kt)("inlineCode",{parentName:"p"},"IEntityBase")," interface. Per default, all ids must be converted to type ",(0,a.kt)("inlineCode",{parentName:"p"},"string"),"."),(0,a.kt)("h3",{id:"partition-key"},"Partition Key"),(0,a.kt)("p",null,"Each entity should define a ",(0,a.kt)("strong",{parentName:"p"},"partition key")," property, which identifies which entities should be stored closely together to improve the read performance."),(0,a.kt)("p",null,"The ",(0,a.kt)("strong",{parentName:"p"},"partition key")," property is indicated by the ",(0,a.kt)("inlineCode",{parentName:"p"},"PartitionKey")," attribute:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Partition Key sample"',title:'"Partition',Key:!0,'sample"':!0},"[PartitionKey]\npublic Guid TenantId { get; set; }\n")),(0,a.kt)("p",null,"In case that you can't identify a ",(0,a.kt)("strong",{parentName:"p"},"partition key")," property, because all your entities are global, it's mandatory to define a dummy partition key property, which has always the same value. We already provide a solution for that:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Global Partition Key sample"',title:'"Global',Partition:!0,Key:!0,'sample"':!0},"using Wemogy.Infrastructure.Database.Core.Attributes;\nusing Wemogy.Infrastructure.Database.Core.Constants;\n\n[PartitionKey]\npublic string PartitionKey { get; set; } = PartitionKeyDefaults.GlobalPartition;\n")),(0,a.kt)("admonition",{title:"Pro Tip",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"GlobalEntityBase")," class as base class to get the default ",(0,a.kt)("strong",{parentName:"p"},"partition key")," included.")),(0,a.kt)("h3",{id:"sample-entity-implementation"},"Sample entity implementation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="User.cs"',title:'"User.cs"'},"using Wemogy.Infrastructure.Database.Core.Abstractions;\nusing Wemogy.Infrastructure.Database.Core.Attributes;\n\npublic class User : EntityBase\n{\n  [PartitionKey]\n  public Guid TenantId { get; set; }\n\n  public string Firstname { get; set; }\n\n  public User()\n  {\n    TenantId = Guid.Empty;\n    Firstname = string.Empty;\n  }\n}\n")),(0,a.kt)("h2",{id:"declaring-the-repository-interface"},"Declaring the Repository Interface"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="IUserRepository.cs"',title:'"IUserRepository.cs"'},"using Wemogy.Infrastructure.Database.Core.Abstractions;\n\npublic interface IUserRepository : IDatabaseRepository<User>\n{\n}\n")),(0,a.kt)("h3",{id:"repository-options"},"Repository options"),(0,a.kt)("p",null,"Using the ",(0,a.kt)("inlineCode",{parentName:"p"},"RepositoryOptions")," attribute you can customize the following options for a repository:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Option"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:null},"Default"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"enableSoftDelete")),(0,a.kt)("td",{parentName:"tr",align:null},"Controls, if the repository should use soft-delete by default"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"true")," if entity implements ",(0,a.kt)("inlineCode",{parentName:"td"},"ISoftDeletable"),(0,a.kt)("br",null),(0,a.kt)("inlineCode",{parentName:"td"},"false")," if entity ",(0,a.kt)("strong",{parentName:"td"},"not")," implements ",(0,a.kt)("inlineCode",{parentName:"td"},"ISoftDeletable"))))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="IUserRepository.cs"',title:'"IUserRepository.cs"'},"using Wemogy.Infrastructure.Database.Core.Abstractions;\nusing Wemogy.Infrastructure.Database.Core.Attributes;\n\n[RepositoryOptions(enableSoftDelete: true)]\npublic interface IUserRepository : IDatabaseRepository<User>\n{\n}\n")),(0,a.kt)("h2",{id:"initializing-a-repository"},"Initializing a Repository"),(0,a.kt)("h3",{id:"databaserepositoryfactory"},"DatabaseRepositoryFactory"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'// create database client factory\nIDatabaseClientFactory databaseClientFactory = new CosmosDatabaseClientFactory("CONNECTION_STRING_HERE", "DATABASE_NAME");\n\n// create database repository factory\nvar databaseRepositoryFactory = new DatabaseRepositoryFactory(databaseClientFactory);\n\n// initialize a repository instance\nvar repository = databaseRepositoryFactory.CreateInstance<IUserRepository>();\n')),(0,a.kt)("h4",{id:"shortcuts"},"Shortcuts"),(0,a.kt)("h5",{id:"cosmosdb-repository-factory"},"CosmosDB repository factory"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'var repository = CosmosDatabaseRepositoryFactory.CreateInstance<IUserRepository>(\n                "CONNECTION_STRING_HERE",\n                "DATABASE_NAME",\n                true);\n')),(0,a.kt)("h5",{id:"inmemory-repository-factory"},"InMemory repository factory"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"var repository = InMemoryDatabaseRepositoryFactory.CreateInstance<IUserRepository>();\n")),(0,a.kt)("h3",{id:"dependency-injection"},"Dependency Injection"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'// create database client factory\nIDatabaseClientFactory databaseClientFactory = new CosmosDatabaseClientFactory("CONNECTION_STRING_HERE", "DATABASE_NAME");\n\n// add repository instance to DI\nservices\n  .AddDatabase(databaseClientFactory)\n  .AddRepository<IUserRepository>()\n  .AddRepository<ITenantRepository>();\n')))}u.isMDXComponent=!0}}]);